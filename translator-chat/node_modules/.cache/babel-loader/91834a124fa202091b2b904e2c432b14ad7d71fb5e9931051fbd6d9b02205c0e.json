{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yakov\\\\Desktop\\\\openAI PROJECTS\\\\Translator APP - CHAT (React)\\\\translator-chat\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [textToTranslate, setTextToTranslate] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('french');\n  const [translation, setTranslation] = useState('');\n  async function requestTranslation() {\n    if (!textToTranslate || !targetLanguage) {\n      alert('Please enter text and select a language to translate.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:3000/translate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: textToTranslate,\n          targetLanguage\n        })\n      });\n      const data = await response.json();\n      setTranslation(data.translation);\n    } catch (error) {\n      console.error('Error requesting translation:', error);\n    }\n  }\n  function handleReset() {\n    setTextToTranslate('');\n    setTargetLanguage('french');\n    setTranslation('');\n  }\n  function handleLanguageChange(event) {\n    setTargetLanguage(event.target.value);\n  }\n  const showTranslation = translation !== '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card ${showTranslation ? 'd-none' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), showTranslation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card my-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer mt-auto py-3 bg-light\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-muted\",\n          children: \"Place your footer content here.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"grbVoz1PLk0ZtRlzhXjQZFjZI/Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","textToTranslate","setTextToTranslate","targetLanguage","setTargetLanguage","translation","setTranslation","requestTranslation","alert","response","fetch","method","headers","body","JSON","stringify","text","data","json","error","console","handleReset","handleLanguageChange","event","target","value","showTranslation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yakov/Desktop/openAI PROJECTS/Translator APP - CHAT (React)/translator-chat/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [textToTranslate, setTextToTranslate] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('french');\n  const [translation, setTranslation] = useState('');\n\n  async function requestTranslation() {\n    if (!textToTranslate || !targetLanguage) {\n      alert('Please enter text and select a language to translate.');\n      return;\n    }\n\n    try {\n      const response = await fetch('http://localhost:3000/translate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: textToTranslate, targetLanguage }),\n      });\n\n      const data = await response.json();\n      setTranslation(data.translation);\n    } catch (error) {\n      console.error('Error requesting translation:', error);\n    }\n  }\n\n  function handleReset() {\n    setTextToTranslate('');\n    setTargetLanguage('french');\n    setTranslation('');\n  }\n\n  function handleLanguageChange(event) {\n    setTargetLanguage(event.target.value);\n  }\n\n  const showTranslation = translation !== '';\n\n  return (\n    <div className=\"container my-3\">\n      {/* Input State */}\n      <div className={`card ${showTranslation ? 'd-none' : ''}`}>\n        <div className=\"card-body\">\n          {/* ... input fields and translate button ... */}\n        </div>\n      </div>\n\n      {/* Translation State */}\n      {showTranslation && (\n        <div className=\"card my-3\">\n          <div className=\"card-body\">\n            {/* ... original and translated text fields and start over button ... */}\n          </div>\n        </div>\n      )}\n\n      {/* Footer */}\n      <footer className=\"footer mt-auto py-3 bg-light\">\n        <div className=\"container text-center\">\n          <span className=\"text-muted\">Place your footer content here.</span>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}